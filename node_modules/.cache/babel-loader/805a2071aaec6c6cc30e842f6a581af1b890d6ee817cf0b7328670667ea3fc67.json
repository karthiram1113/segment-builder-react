{"ast":null,"code":"var _jsxFileName = \"T:\\\\karthi\\\\screen-1.0\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { Routes, Route, BrowserRouter } from \"react-router-dom\";\nimport { ToastContainer } from 'react-toastify';\nimport { useState } from 'react';\nimport SegmentModal from './home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // üî¥ IMPORTANT: Replace this placeholder with your actual webhook.site URL \n  const WEBHOOK_URL = 'https://webhook.site/379768ca-a2cf-4cf9-9b5e-0142d4841f96';\n  const handleSaveData = async data => {\n    console.log('Attempting to send data:', data);\n    try {\n      const response = await fetch(WEBHOOK_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        mode: \"no-cors\",\n        // Convert the required JSON payload to a string\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        console.log('Segment data successfully sent to webhook.site');\n        alert('Segment saved! Data successfully sent to webhook.site. Check your webhook page!');\n      } else {\n        console.error('‚ùå Failed to send data. Status:', response.status);\n        alert('Segment saved, but data submission failed. Check the console.');\n      }\n    } catch (error) {\n      console.error('‚ùå Network error during data submission:', error);\n      alert('Segment saved, but a network error occurred. Check the console.');\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <div className=\"App\">\n    //   <BrowserRouter>\n    //     <Routes>\n    //       <Route path=\"/\" element={<HomeComponent />} />\n    //     </Routes>\n    //   </BrowserRouter>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"View Audience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-save-btn\",\n        onClick: () => setIsModalOpen(true),\n        children: \"Save segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SegmentModal, {\n        isVisible: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        onSave: handleSaveData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"mLsII5HRP5G63IA/8vjZ5YHXWr8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Routes","Route","BrowserRouter","ToastContainer","useState","SegmentModal","jsxDEV","_jsxDEV","App","_s","isModalOpen","setIsModalOpen","WEBHOOK_URL","handleSaveData","data","console","log","response","fetch","method","headers","mode","body","JSON","stringify","ok","alert","error","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isVisible","onClose","onSave","_c","$RefreshReg$"],"sources":["T:/karthi/screen-1.0/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { Routes, Route, BrowserRouter} from \"react-router-dom\";\nimport { ToastContainer } from 'react-toastify';\nimport { useState } from 'react';\nimport SegmentModal from './home';\n\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // üî¥ IMPORTANT: Replace this placeholder with your actual webhook.site URL \n  const WEBHOOK_URL = 'https://webhook.site/379768ca-a2cf-4cf9-9b5e-0142d4841f96';\n\n  const handleSaveData = async (data) => {\n    console.log('Attempting to send data:', data);\n\n    try {\n      const response = await fetch(WEBHOOK_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        mode: \"no-cors\",\n        // Convert the required JSON payload to a string\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        console.log('Segment data successfully sent to webhook.site');\n        alert('Segment saved! Data successfully sent to webhook.site. Check your webhook page!');\n      } else {\n        console.error('‚ùå Failed to send data. Status:', response.status);\n        alert('Segment saved, but data submission failed. Check the console.');\n      }\n    } catch (error) {\n      console.error('‚ùå Network error during data submission:', error);\n      alert('Segment saved, but a network error occurred. Check the console.');\n    }\n  };\n  return (\n    // <div className=\"App\">\n    //   <BrowserRouter>\n    //     <Routes>\n    //       <Route path=\"/\" element={<HomeComponent />} />\n    //     </Routes>\n    //   </BrowserRouter>\n    // </div>\n    <div className=\"app-container\">\n      <h1>View Audience</h1>\n\n      {/* 1. Button caption \"Save segment\" */}\n      <button\n        className=\"main-save-btn\"\n        onClick={() => setIsModalOpen(true)}\n      >\n        Save segment\n      </button>\n\n      {/* 2. Popup component */}\n      <SegmentModal\n        isVisible={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onSave={handleSaveData}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,MAAM,EAAEC,KAAK,EAAEC,aAAa,QAAO,kBAAkB;AAC9D,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,YAAY,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMQ,WAAW,GAAG,2DAA2D;EAE/E,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;IACrCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,IAAI,CAAC;IAE7C,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACN,WAAW,EAAE;QACxCO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE,SAAS;QACf;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACQ,EAAE,EAAE;QACfV,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;QAC7DU,KAAK,CAAC,iFAAiF,CAAC;MAC1F,CAAC,MAAM;QACLX,OAAO,CAACY,KAAK,CAAC,gCAAgC,EAAEV,QAAQ,CAACW,MAAM,CAAC;QAChEF,KAAK,CAAC,+DAA+D,CAAC;MACxE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/DD,KAAK,CAAC,iEAAiE,CAAC;IAC1E;EACF,CAAC;EACD;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACAnB,OAAA;MAAKsB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BvB,OAAA;QAAAuB,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGtB3B,OAAA;QACEsB,SAAS,EAAC,eAAe;QACzBM,OAAO,EAAEA,CAAA,KAAMxB,cAAc,CAAC,IAAI,CAAE;QAAAmB,QAAA,EACrC;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAGT3B,OAAA,CAACF,YAAY;QACX+B,SAAS,EAAE1B,WAAY;QACvB2B,OAAO,EAAEA,CAAA,KAAM1B,cAAc,CAAC,KAAK,CAAE;QACrC2B,MAAM,EAAEzB;MAAe;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;AAEV;AAACzB,EAAA,CA3DQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}