{"ast":null,"code":"var _jsxFileName = \"T:\\\\karthi\\\\portfolio-1\\\\src\\\\components\\\\Home\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useCallback } from 'react';\nimport './App.css'; // You'll need a basic CSS file for styling\n\n// --- Schema Definitions ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allSchemas = [{\n  label: 'First Name',\n  value: 'first_name',\n  trait: 'User Traits'\n}, {\n  label: 'Last Name',\n  value: 'last_name',\n  trait: 'User Traits'\n}, {\n  label: 'Gender',\n  value: 'gender',\n  trait: 'User Traits'\n}, {\n  label: 'Age',\n  value: 'age',\n  trait: 'User Traits'\n}, {\n  label: 'Account Name',\n  value: 'account_name',\n  trait: 'Group Traits'\n}, {\n  label: 'City',\n  value: 'city',\n  trait: 'User Traits'\n}, {\n  label: 'State',\n  value: 'state',\n  trait: 'User Traits'\n}];\n\n// --- SegmentModal Component ---\nconst SegmentModal = ({\n  isVisible,\n  onClose,\n  onSave\n}) => {\n  _s();\n  const [segmentName, setSegmentName] = useState('');\n  const [selectedSchemas, setSelectedSchemas] = useState([]);\n  const [currentSchemaToAdd, setCurrentSchemaToAdd] = useState('');\n\n  // 1. Determine available options for the \"Add schema to segment\" dropdown\n  const availableOptions = useMemo(() => {\n    const selectedValues = new Set(selectedSchemas.map(s => s.value));\n    return allSchemas.filter(schema => !selectedValues.has(schema.value));\n  }, [selectedSchemas]);\n\n  // 2. Handler for adding a new schema from the dropdown\n  const handleAddNewSchema = useCallback(() => {\n    if (currentSchemaToAdd) {\n      const schemaToAdd = allSchemas.find(s => s.value === currentSchemaToAdd);\n      if (schemaToAdd) {\n        // Add the selected schema to the list\n        setSelectedSchemas(prev => [...prev, schemaToAdd]);\n\n        // Reset the \"Add schema to segment\" dropdown (Requirement 8)\n        setCurrentSchemaToAdd('');\n      }\n    }\n  }, [currentSchemaToAdd]);\n\n  // 3. Handler for removing a selected schema\n  const handleRemoveSchema = useCallback(valueToRemove => {\n    setSelectedSchemas(prev => prev.filter(s => s.value !== valueToRemove));\n  }, []);\n\n  // 4. Handler for changing a schema in the blue box (Requirement 7)\n  const handleChangeSelectedSchema = useCallback((oldValue, newValue) => {\n    const newSchema = allSchemas.find(s => s.value === newValue);\n    if (newSchema) {\n      setSelectedSchemas(prev => prev.map(s => s.value === oldValue ? newSchema : s));\n    }\n  }, []);\n\n  // 5. Handler for the final Save action (Requirement 9)\n  const handleSaveSegment = useCallback(() => {\n    const payload = {\n      segment_name: segmentName,\n      schema: selectedSchemas.map(s => ({\n        [s.value]: s.label\n      }))\n    };\n\n    // Log the data and send it to the parent handler\n    console.log('Saving Segment Data:', payload);\n    onSave(payload);\n\n    // Close and reset state\n    setSegmentName('');\n    setSelectedSchemas([]);\n    setCurrentSchemaToAdd('');\n    onClose();\n  }, [segmentName, selectedSchemas, onClose, onSave]);\n  if (!isVisible) {\n    return null;\n  }\n\n  // Determine available options for modification inside the blue box\n  const getDynamicOptions = currentValue => {\n    const selectedValues = new Set(selectedSchemas.map(s => s.value));\n    return allSchemas.filter(schema => !selectedValues.has(schema.value) || schema.value === currentValue);\n  };\n\n  // Custom styled dropdown for schema selection\n  const SchemaDropdown = ({\n    schema,\n    onChange,\n    onRemove,\n    allPossibleOptions\n  }) => {\n    const isGroupTrait = schema.trait === 'Group Traits';\n    const indicatorStyle = {\n      backgroundColor: isGroupTrait ? 'red' : 'green',\n      borderRadius: '50%',\n      width: '8px',\n      height: '8px',\n      display: 'inline-block',\n      marginRight: '8px'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schema-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: indicatorStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"schema-select\",\n        value: schema.value,\n        onChange: e => onChange(schema.value, e.target.value),\n        children: allPossibleOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-btn\",\n        onClick: () => onRemove(schema.value),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-backdrop\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Saving Segment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter the Name of the Segment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name of the segment\",\n          value: segmentName,\n          onChange: e => setSegmentName(e.target.value),\n          className: \"segment-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"schema-info\",\n          children: [\"To save your segment, you need to add the schemas to build the query\", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              float: 'right',\n              fontSize: '12px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'green',\n                marginRight: '5px'\n              },\n              children: \"\\u25CF User Traits\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'red'\n              },\n              children: \"\\u25CF Group Traits\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-schemas-box\",\n          children: [selectedSchemas.map((schema, index) => /*#__PURE__*/_jsxDEV(SchemaDropdown, {\n            schema: schema,\n            onChange: handleChangeSelectedSchema,\n            onRemove: handleRemoveSchema,\n            allPossibleOptions: getDynamicOptions(schema.value)\n          }, schema.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schema-row-add\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: '#ccc',\n                borderRadius: '50%',\n                width: '8px',\n                height: '8px',\n                display: 'inline-block',\n                marginRight: '8px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: currentSchemaToAdd,\n              onChange: e => setCurrentSchemaToAdd(e.target.value),\n              className: \"schema-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: \"Add schema to segment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 33\n              }, this), availableOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"remove-btn-placeholder\",\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-schema-link\",\n            onClick: handleAddNewSchema,\n            disabled: !currentSchemaToAdd,\n            children: \"+ Add new schema\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleSaveSegment,\n          disabled: !segmentName || selectedSchemas.length === 0,\n          children: \"Save the Segment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-btn\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(SegmentModal, \"blpUO8pA6roXnyPUZoxdYZJm8FE=\");\n_c = SegmentModal;\nvar _c;\n$RefreshReg$(_c, \"SegmentModal\");","map":{"version":3,"names":["React","useState","useMemo","useCallback","jsxDEV","_jsxDEV","allSchemas","label","value","trait","SegmentModal","isVisible","onClose","onSave","_s","segmentName","setSegmentName","selectedSchemas","setSelectedSchemas","currentSchemaToAdd","setCurrentSchemaToAdd","availableOptions","selectedValues","Set","map","s","filter","schema","has","handleAddNewSchema","schemaToAdd","find","prev","handleRemoveSchema","valueToRemove","handleChangeSelectedSchema","oldValue","newValue","newSchema","handleSaveSegment","payload","segment_name","console","log","getDynamicOptions","currentValue","SchemaDropdown","onChange","onRemove","allPossibleOptions","isGroupTrait","indicatorStyle","backgroundColor","borderRadius","width","height","display","marginRight","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","e","target","option","onClick","type","placeholder","float","fontSize","color","index","disabled","length","_c","$RefreshReg$"],"sources":["T:/karthi/portfolio-1/src/components/Home/index.jsx"],"sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\r\nimport './App.css'; // You'll need a basic CSS file for styling\r\n\r\n// --- Schema Definitions ---\r\nconst allSchemas = [\r\n    { label: 'First Name', value: 'first_name', trait: 'User Traits' },\r\n    { label: 'Last Name', value: 'last_name', trait: 'User Traits' },\r\n    { label: 'Gender', value: 'gender', trait: 'User Traits' },\r\n    { label: 'Age', value: 'age', trait: 'User Traits' },\r\n    { label: 'Account Name', value: 'account_name', trait: 'Group Traits' },\r\n    { label: 'City', value: 'city', trait: 'User Traits' },\r\n    { label: 'State', value: 'state', trait: 'User Traits' },\r\n];\r\n\r\n// --- SegmentModal Component ---\r\nconst SegmentModal = ({ isVisible, onClose, onSave }) => {\r\n    const [segmentName, setSegmentName] = useState('');\r\n    const [selectedSchemas, setSelectedSchemas] = useState([]);\r\n    const [currentSchemaToAdd, setCurrentSchemaToAdd] = useState('');\r\n\r\n    // 1. Determine available options for the \"Add schema to segment\" dropdown\r\n    const availableOptions = useMemo(() => {\r\n        const selectedValues = new Set(selectedSchemas.map(s => s.value));\r\n        return allSchemas.filter(schema => !selectedValues.has(schema.value));\r\n    }, [selectedSchemas]);\r\n\r\n    // 2. Handler for adding a new schema from the dropdown\r\n    const handleAddNewSchema = useCallback(() => {\r\n        if (currentSchemaToAdd) {\r\n            const schemaToAdd = allSchemas.find(s => s.value === currentSchemaToAdd);\r\n            if (schemaToAdd) {\r\n                // Add the selected schema to the list\r\n                setSelectedSchemas(prev => [...prev, schemaToAdd]);\r\n\r\n                // Reset the \"Add schema to segment\" dropdown (Requirement 8)\r\n                setCurrentSchemaToAdd('');\r\n            }\r\n        }\r\n    }, [currentSchemaToAdd]);\r\n\r\n    // 3. Handler for removing a selected schema\r\n    const handleRemoveSchema = useCallback((valueToRemove) => {\r\n        setSelectedSchemas(prev => prev.filter(s => s.value !== valueToRemove));\r\n    }, []);\r\n\r\n    // 4. Handler for changing a schema in the blue box (Requirement 7)\r\n    const handleChangeSelectedSchema = useCallback((oldValue, newValue) => {\r\n        const newSchema = allSchemas.find(s => s.value === newValue);\r\n        if (newSchema) {\r\n            setSelectedSchemas(prev =>\r\n                prev.map(s => (s.value === oldValue ? newSchema : s))\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    // 5. Handler for the final Save action (Requirement 9)\r\n    const handleSaveSegment = useCallback(() => {\r\n        const payload = {\r\n            segment_name: segmentName,\r\n            schema: selectedSchemas.map(s => ({ [s.value]: s.label }))\r\n        };\r\n\r\n        // Log the data and send it to the parent handler\r\n        console.log('Saving Segment Data:', payload);\r\n        onSave(payload);\r\n\r\n        // Close and reset state\r\n        setSegmentName('');\r\n        setSelectedSchemas([]);\r\n        setCurrentSchemaToAdd('');\r\n        onClose();\r\n    }, [segmentName, selectedSchemas, onClose, onSave]);\r\n\r\n    if (!isVisible) {\r\n        return null;\r\n    }\r\n\r\n    // Determine available options for modification inside the blue box\r\n    const getDynamicOptions = (currentValue) => {\r\n        const selectedValues = new Set(selectedSchemas.map(s => s.value));\r\n        return allSchemas.filter(schema =>\r\n            !selectedValues.has(schema.value) || schema.value === currentValue\r\n        );\r\n    };\r\n\r\n    // Custom styled dropdown for schema selection\r\n    const SchemaDropdown = ({ schema, onChange, onRemove, allPossibleOptions }) => {\r\n        const isGroupTrait = schema.trait === 'Group Traits';\r\n        const indicatorStyle = {\r\n            backgroundColor: isGroupTrait ? 'red' : 'green',\r\n            borderRadius: '50%',\r\n            width: '8px',\r\n            height: '8px',\r\n            display: 'inline-block',\r\n            marginRight: '8px'\r\n        };\r\n\r\n        return (\r\n            <div className=\"schema-row\">\r\n                <div style={indicatorStyle}></div>\r\n                <select\r\n                    className=\"schema-select\"\r\n                    value={schema.value}\r\n                    onChange={(e) => onChange(schema.value, e.target.value)}\r\n                >\r\n                    {allPossibleOptions.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                <button className=\"remove-btn\" onClick={() => onRemove(schema.value)}>-</button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-backdrop\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                    <h2>Saving Segment</h2>\r\n                    <button className=\"close-btn\" onClick={onClose}>&times;</button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <label>Enter the Name of the Segment</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Name of the segment\"\r\n                        value={segmentName}\r\n                        onChange={(e) => setSegmentName(e.target.value)}\r\n                        className=\"segment-input\"\r\n                    />\r\n\r\n                    <p className=\"schema-info\">\r\n                        To save your segment, you need to add the schemas to build the query\r\n                        <span style={{ float: 'right', fontSize: '12px' }}>\r\n                            <span style={{ color: 'green', marginRight: '5px' }}>● User Traits</span>\r\n                            <span style={{ color: 'red' }}>● Group Traits</span>\r\n                        </span>\r\n                    </p>\r\n\r\n                    {/* Blue Box for Selected Schemas */}\r\n                    <div className=\"selected-schemas-box\">\r\n                        {selectedSchemas.map((schema, index) => (\r\n                            <SchemaDropdown\r\n                                key={schema.value}\r\n                                schema={schema}\r\n                                onChange={handleChangeSelectedSchema}\r\n                                onRemove={handleRemoveSchema}\r\n                                allPossibleOptions={getDynamicOptions(schema.value)}\r\n                            />\r\n                        ))}\r\n\r\n                        {/* Dropdown for adding new schemas */}\r\n                        <div className=\"schema-row-add\">\r\n                            <div style={{ backgroundColor: '#ccc', borderRadius: '50%', width: '8px', height: '8px', display: 'inline-block', marginRight: '8px' }}></div>\r\n                            <select\r\n                                value={currentSchemaToAdd}\r\n                                onChange={(e) => setCurrentSchemaToAdd(e.target.value)}\r\n                                className=\"schema-select\"\r\n                            >\r\n                                <option value=\"\" disabled>Add schema to segment</option>\r\n                                {availableOptions.map(option => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            <div className=\"remove-btn-placeholder\">-</div>\r\n                        </div>\r\n\r\n                        {/* +Add new schema link (Requirement 5) */}\r\n                        <button\r\n                            className=\"add-schema-link\"\r\n                            onClick={handleAddNewSchema}\r\n                            disabled={!currentSchemaToAdd}\r\n                        >\r\n                            + Add new schema\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"modal-footer\">\r\n                    <button\r\n                        className=\"save-btn\"\r\n                        onClick={handleSaveSegment}\r\n                        disabled={!segmentName || selectedSchemas.length === 0}\r\n                    >\r\n                        Save the Segment\r\n                    </button>\r\n                    <button className=\"cancel-btn\" onClick={onClose}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}